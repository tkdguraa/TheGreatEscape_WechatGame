const redis = require('redis');
const {
  promisify
} = require('util');

class Redis {
  constructor(client) {
    this._ = {
      client,
      methods: {
        // string
        set: promisify(client.set).bind(client),
        get: promisify(client.get).bind(client),
        exists: promisify(client.exists).bind(client),

        // hash
        hset: promisify(client.hset).bind(client),
        hget: promisify(client.hget).bind(client),
        hmset: promisify(client.hmset).bind(client),
        hexists: promisify(client.hexists).bind(client),

        // common
        expire: promisify(client.expire).bind(client),
      }
    };
  }
  on(event, listener) {
    this._.client.on(event, listener);
  }
  async expire(key, seconds) {
    return this._.methods.expire(key, seconds);
  }


  async set(key, value) {
    return this._.methods.set(key, value);
  }
  async get(key) {
    return this._.methods.get(key);
  }
  async exists(key) {
    return this._.methods.exists(key);
  }


  async hset(key, field, value) {
    return this._.methods.hset(key, field, value);
  }
  async hget(key, field) {
    return this._.methods.hget(key, field);
  }
  async hmset(key, object) {
    return this._.methods.hmset(key, object);
  }
  async hexists(key, field) {
    return this._.methods.hexists(key, field);
  }
}

module.exports = {
  createClient(options) {
    return new Redis(redis.createClient(options));
  }
};
